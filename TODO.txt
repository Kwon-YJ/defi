# DEFIPOSER-ARB 재현을 위한 TODO 목록
# 논문: "[2103.02228] On the Just-In-Time Discovery of Profit-Generating Transactions in DeFi Protocols"
# 현재 상태: 4개 base token만 사용하는 매우 기초적인 구현
# 목표: 논문의 DEFIPOSER-ARB 완전 재현 (96개 protocol actions, 25개 assets, 6.43초 평균 실행시간)

## 1. 핵심 알고리즘 완성 (Critical Missing Components)

### 1.1 Local Search 알고리즘 구현 (현재 완전히 누락됨)
- [x] **CRITICAL**: Negative cycle 탐지 후 Local Search 단계 구현
- [x] 논문 Figure 1의 4단계 "perform a local search and repeat" 구현  
- [x] Hill climbing을 통한 거래량 최적화
- [x] Multiple starting points에서 local search 병렬 실행
- [x] Best revenue transaction 선택 로직 구현

### 1.2 Bellman-Ford-Moore 알고리즘 정확한 구현
- [x] **CRITICAL**: 논문의 정확한 weight calculation 구현 (-log(exchange_rate) 방식)
- [x] Graph state building을 매 블록마다 실시간 업데이트
- [x] Negative cycle identification 성능 최적화  
- [x] 96개 protocol actions 처리 가능한 확장성 확보

### 1.3 Graph 구조 개선
- [x] Multi-graph 지원: 동일 토큰 쌍에서 여러 DEX edge 처리
- [x] Dynamic graph update: 실시간 상태 변화 반영
- [x] Graph pruning: 비효율적인 edge 자동 제거
- [x] Memory-efficient graph representation

## 2. 데이터 확장 - 논문 규모 달성 (Scale to Paper Specifications)

### 2.1 DeFi Protocol Actions 확장 (현재 ~6개 → 96개)
- [ ] **CRITICAL**: 논문에서 언급한 96개 protocol actions 식별 및 구현
- [x] (분할) 96개 protocol actions 후보 카탈로그 작성 (docs/protocol_actions_catalog.md)
- [x] (분할) ActionRegistry에 96개 스케폴딩/플레이스홀더 등록 (확장 가능 구조)
- [x] Uniswap V2/Sushiswap (swap actions) 그래프 반영 구현
- [x] Uniswap V3 (swap/liquidity) 그래프 반영 구현
- [x] Compound, Aave (lending/borrowing actions) 
- [x] Curve Finance (stableswap actions)
- [x] Balancer (weighted pool actions)
- [x] MakerDAO (CDP, DAI minting actions)
- [x] Synthetix (synthetic asset actions)
- [x] Yearn Finance (yield strategy actions)
- [x] dYdX (margin trading actions)
- [ ] (분할) 각 protocol 주요 functions 구현
  - [x] Uniswap V2: swap (기반 구현)
  - [x] Uniswap V2: add/remove liquidity
  - [x] Uniswap V3: swap (기반 구현)
  - [x] Uniswap V3: add/remove liquidity, collect fees
  - [x] Curve: exchange (stableswap)
  - [x] Curve: add/remove liquidity
  - [x] Balancer: weighted swap
  - [x] Balancer: join/exit pool
  - [x] Aave: supply/withdraw
  - [x] Aave: borrow/repay
  - [x] Compound: mint/redeem (supply/withdraw)
  - [x] Compound: borrow/repay
  - [x] MakerDAO: CDP (WETH->DAI mint)
  - [x] MakerDAO: PSM (USDC<->DAI)
  - [x] Synthetix: exchange (sETH<->sUSD)
  - [x] Synthetix: mint/burn (SNX staking)
  - [x] dYdX: margin open/close (가격 근사)

#### 2.1A 정밀도/현실성 향상 (이전 제안 사항 반영)
- [x] 공통: ERC-20 decimals 정규화(모든 rate/유동성/LP 계산에 적용)
- [x] 공통: Edge 메타데이터 정리(원본 컨트랙트 주소, fee tier, source, 신뢰도)
- [x] 공통: 가스비 동적 추정(EIP-1559 base/priority, 프로토콜별 gas limit)
- [x] 공통: 슬리피지/유동성 모델 고도화(프로토콜별 정확한 수식 기반)
- [x] 공통: Synthetic 토큰命명 규칙/매핑 일원화(LP, debt, BPT, V3 LP 등)
- [x] 공통: 부채/담보 제약 반영(Health factor/LTV/청산 임계 반영) 및 경로 타당성 필터  

- [ ] Uniswap V2 개선
  - [x] LP 민팅/소각 정확화: exact 수식 적용(min(amount0*ts/r0, amount1*ts/r1))
  - [x] token decimals 반영 및 LP decimals 고려
  - [x] 이벤트 기반 업데이트(Mint/Burn/Sync)로 그래프 실시간 갱신
- [x] fee-on-transfer/rebase 토큰 감지 및 보수적 처리  
  - [x] 이벤트 기반 업데이트(Mint/Burn/Sync)로 그래프 실시간 갱신

- [ ] Uniswap V3 개선
  - [x] Tick-range 포지션 모델링( tickLower/upper, tickSpacing 반영)
  - [x] 유동성 민팅 수식(L) 기반 add/remove 비율 정확화(sqrtP, ticks 사용)
  - [x] 수취 수수료 accrual 추정(feeGrowthGlobal/Inside, Collect 이벤트 반영)
  - [x] fee tier 라벨/키 분리(500/3000/10000) 및 통계/선택 로직 개선
  - [x] pool.liquidity/액티브 밴드 기반 pseudo-liquidity 보정

- [ ] Curve 개선
  - [x] Curve Registry 통합(모든 풀/메타풀 자동 탐색)
  - [x] calc_token_amount / calc_withdraw_one_coin 사용해 add/remove 정확화
  - [x] 증폭계수(A), pool fee/admin fee, coin decimals 반영
  - [x] LP totalSupply/decimals 사용 및 이벤트(Add/RemoveLiquidity) 반영

- [ ] Balancer 개선
  - [x] getNormalizedWeights, getSwapFeePercentage, getPoolTokens 기반 spot 정확화
  - [x] Weighted 수학 기반 join/exit 수식 적용(BPT totalSupply 사용)
  - [x] 단일자산 join/exit 수수료 반영 및 비례 join/exit 분기 처리

- [ ] Aave 개선
  - [x] stable/variable debt 토큰 구분 및 주소 DataProvider로 동적 조회
  - [x] 현재 이자율/리스크 파라미터(LTV, liquidationThreshold, eMode) 반영
  - [x] health factor 계산 및 경로 유효성 제약 추가

- [ ] Compound 개선
  - [x] borrowRatePerBlock/supplyRatePerBlock 반영(이자 누적 효과 근사)
  - [x] Comptroller 기반 collateral factor/market 지원여부 확인 후 엣지 반영
  - [x] cToken decimals/exchangeRateStored 정밀 처리

- [ ] MakerDAO 개선
  - [x] OSM/Vault(ilk)별 파라미터(spot, duty, line) 사용, 담보종류(WBTC 등) 확장
  - [x] PSM 실제 수수료(tin/tout) on-chain 반영
  - [x] Stability fee/interest 누적 효과 근사

- [ ] Synthetix 개선
  - [x] SystemSettings target c-ratio/freezeFee/exchange fee per synth 반영
  - [x] DebtCache/전체 부채 풀 변동 반영 및 L2 지원
  - [x] 추가 synth(sBTC 등) 확장 및 환전 경로 확대

- [ ] dYdX 개선
  - [x] 공식 API/온체인 파라미터 연동(펀딩비, 마진 요구치, 레버리지 한도)
  - [x] 포지션 오픈/종료 수수료/펀딩비 동적 반영
  - [x] 경로 대검증: 위험 파라미터 기반 불가 경로 제거

#### 2.1B 실시간/데이터 동기화 강화
  - [x] 프로토콜별 이벤트 구독(예: V2 Sync/Mint/Burn, V3 Increase/Decrease/Collect, Curve Add/Remove, Balancer PoolTokens/BPT 변경, Aave/Compound Accrue/Reserve 업데이트)
  - [x] WS 다중 소스 폴백/리던던시 구성 및 지연/에러 처리 로직
- [x] Pruning/Compaction 이전에 이벤트 기반 미니 업데이트 적용

### 2.2 자산 지원 확장 (현재 4개 base tokens → 논문의 25개 assets)
- [ ] **CRITICAL**: 논문에서 사용한 정확한 25개 자산 식별 및 구현
  - [x] (분할) 25개 자산 심볼 식별 및 문서화 (docs/paper_25_assets.md)
  - [x] (분할) 실행 옵션 추가: `USE_PAPER_25_ASSETS=1` 시 JSON 로드/적용
  - [ ] (분할) 메인넷 주소/decimals 정확 매핑 보완(config/paper_assets_25.json)
  - [ ] (분할) 25자산 기준 주요 페어 수집/빌드 벤치마크 및 튜닝
- [ ] ETH, WETH (native and wrapped Ether)
- [ ] Stablecoins: USDC, USDT, DAI (현재 있음, 확장 필요)  
- [ ] Major tokens: WBTC, UNI, SUSHI, COMP, AAVE
- [ ] DeFi ecosystem tokens: CRV, BAL, YFI, MKR
- [ ] Lending protocol tokens: cETH, cUSDC, aETH, aUSDC
- [ ] LP tokens: UNI-V2 pairs, Curve LP tokens
- [ ] Synthetic assets: sUSD, sETH (Synthetix)
- [ ] 추가 주요 ERC-20 tokens (총 25개까지)
- [ ] Real-time price feeds 구현

### 2.3 실시간 데이터 수집 개선
- [ ] WebSocket 연결을 통한 실시간 가격 업데이트
- [ ] Multiple data sources 동시 처리 (redundancy)
- [ ] Data validation 및 outlier detection
- [ ] Historical data backfilling for analysis
- [ ] Rate limiting 및 API quota 관리

## 3. 성능 최적화 - 논문 성능 기준 달성 (Performance to Match Paper)

### 3.1 실행 시간 최적화 (현재 미측정 → 평균 6.43초 달성)
- [ ] **CRITICAL**: 현재 실행 시간 측정 및 벤치마킹 구현
- [ ] Graph building 성능 최적화 (현재 병목점 제거)
- [ ] Negative cycle detection 알고리즘 최적화
- [ ] Local search 병렬 처리 구현
- [ ] Memory usage 최적화 (96 protocol actions 처리)
- [ ] Database query 최적화

### 3.2 실시간 처리 능력 향상 (매 블록 처리)
- [ ] **CRITICAL**: 블록별 처리 루프 구현 (현재 5초 delay → 블록 기반)  
- [ ] Ethereum block time (13.5초) 내 처리 보장
- [ ] 새 블록 알림 시스템 구현
- [ ] State change detection 및 즉시 대응
- [ ] Transaction pool monitoring

## 4. 검증 및 테스팅 - 논문 결과 재현 (Validation & Testing)

### 4.1 Revenue 목표 달성 검증
- [ ] **CRITICAL**: 주간 평균 191.48 ETH (76,592 USD) 수익 목표 설정
- [ ] 150일간 backtesting 시스템 구현  
- [ ] 최고 거래 수익 81.31 ETH (32,524 USD) 달성 검증
- [ ] ROI tracking 및 성과 측정 시스템

### 4.2 시스템 안정성 검증  
- [ ] 96개 protocol actions 동시 처리 안정성 테스트
- [ ] 25개 assets 실시간 처리 스트레스 테스트
- [ ] Memory leak 및 performance degradation 점검
- [ ] Error handling 및 recovery 메커니즘

## 5. 고급 기능 구현 (Advanced Features from Paper)

### 5.1 Flash Loan 통합 (논문의 핵심 기능)
- [ ] **CRITICAL**: Flash loan을 활용한 차익거래 구현
- [ ] Aave flash loan 프로토콜 통합
- [ ] dYdX flash loan 지원  
- [ ] 1 ETH 미만 초기 자본으로 고수익 달성 검증
- [ ] Flash loan fee 최적화

### 5.2 복합 거래 전략 (Beyond Simple Arbitrage)
- [ ] Lending/borrowing + swap 조합 거래
- [ ] Multi-hop arbitrage (3+ protocols)
- [ ] Economic state exploitation 기능
- [ ] MEV (Maximal Extractable Value) 최적화

## 6. 인프라 및 운영 (Infrastructure & Operations)

### 6.1 실시간 모니터링
- [ ] 실행 시간 모니터링 (6.43초 목표 추적)
- [ ] 수익률 실시간 추적 시스템
- [ ] 시스템 리소스 모니터링
- [ ] Alert 및 notification 시스템

### 6.2 로깅 및 디버깅  
- [ ] 상세한 거래 로그 시스템
- [ ] Performance bottleneck 식별
- [ ] Error tracking 및 debugging
- [ ] 논문 결과 비교 대시보드

---

## 즉시 구현 우선순위 (CRITICAL - 논문 재현을 위한 필수사항)

### Phase 1: 핵심 알고리즘 완성 (1-2주)
1. **Local Search 알고리즘 구현** - 현재 완전히 누락된 핵심 기능
2. **96개 Protocol Actions 식별 및 구현** - 현재 ~6개만 있음
3. **25개 Assets 지원** - 현재 4개만 있음  
4. **실행 시간 측정 및 최적화** - 6.43초 목표
5. **블록 기반 실시간 처리** - 현재 5초 delay 방식

### Phase 2: 고급 기능 구현 (2-4주)  
1. **Flash Loan 통합** - 논문의 핵심 수익 원천
2. **복합 거래 전략** - Simple arbitrage를 넘어선 기능
3. **성능 최적화** - 대규모 데이터 처리
4. **수익률 검증** - 논문 수준 달성 확인

### Phase 3: 검증 및 완성 (1-2주)
1. **150일 Backtesting** - 논문 결과 재현  
2. **성과 지표 달성** - 191.48 ETH/week 목표
3. **시스템 안정성 확보**
4. **모니터링 및 로깅 완성**

---

## 성공 지표 (논문 기준)
- ✅ **처리 시간**: 평균 6.43초 이하
- ✅ **수익률**: 주간 평균 191.48 ETH ($76,592)  
- ✅ **최고 수익**: 단일 거래 81.31 ETH ($32,524)
- ✅ **규모**: 96개 protocol actions, 25개 assets
- ✅ **기간**: 150일간 지속 가능한 성능
- ✅ **자본 효율**: 1 ETH 미만으로 고수익 달성

## 현재 상태 분석
- ❌ **Local Search**: 완전히 누락 (논문의 핵심 알고리즘)
- ❌ **Protocol Actions**: ~6개만 구현 (목표: 96개)
- ❌ **Assets**: 4개 base tokens만 (목표: 25개)
- ❌ **성능 측정**: 실행 시간 미측정 (목표: 6.43초)
- ❌ **Flash Loans**: 미구현 (논문의 핵심 수익 원천)
- ❌ **수익률 검증**: 미측정 (목표: 191.48 ETH/week)

**결론**: 현재는 DEFIPOSER-ARB의 매우 기초적인 스케치 수준이며, 논문을 재현하기 위해서는 상당한 추가 개발이 필요함.
